// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Pocogeneratortest
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<AdCampaign> AdCampaigns { get; set; } // AdCampaigns
        public System.Data.Entity.DbSet<AdCampaignSetting> AdCampaignSettings { get; set; } // AdCampaignSettings
        public System.Data.Entity.DbSet<AdTemplate> AdTemplates { get; set; } // AdTemplates
        public System.Data.Entity.DbSet<AquisioFeedExportLog> AquisioFeedExportLogs { get; set; } // AquisioFeedExportLogs
        public System.Data.Entity.DbSet<Auditing> Auditings { get; set; } // Auditing
        public System.Data.Entity.DbSet<DealerExcludedModel> DealerExcludedModels { get; set; } // DealerExcludedModels
        public System.Data.Entity.DbSet<DealerGeoTown> DealerGeoTowns { get; set; } // DealerGeoTowns
        public System.Data.Entity.DbSet<DealerNameOverride> DealerNameOverrides { get; set; } // DealerNameOverrides
        public System.Data.Entity.DbSet<ExceptionLog> ExceptionLogs { get; set; } // ExceptionLog
        public System.Data.Entity.DbSet<MakeOverride> MakeOverrides { get; set; } // MakeOverrides
        public System.Data.Entity.DbSet<ModelOverride> ModelOverrides { get; set; } // ModelOverrides

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=DigitalAdministrationContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AdCampaignConfiguration());
            modelBuilder.Configurations.Add(new AdCampaignSettingConfiguration());
            modelBuilder.Configurations.Add(new AdTemplateConfiguration());
            modelBuilder.Configurations.Add(new AquisioFeedExportLogConfiguration());
            modelBuilder.Configurations.Add(new AuditingConfiguration());
            modelBuilder.Configurations.Add(new DealerExcludedModelConfiguration());
            modelBuilder.Configurations.Add(new DealerGeoTownConfiguration());
            modelBuilder.Configurations.Add(new DealerNameOverrideConfiguration());
            modelBuilder.Configurations.Add(new ExceptionLogConfiguration());
            modelBuilder.Configurations.Add(new MakeOverrideConfiguration());
            modelBuilder.Configurations.Add(new ModelOverrideConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AdCampaignConfiguration(schema));
            modelBuilder.Configurations.Add(new AdCampaignSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new AdTemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new AquisioFeedExportLogConfiguration(schema));
            modelBuilder.Configurations.Add(new AuditingConfiguration(schema));
            modelBuilder.Configurations.Add(new DealerExcludedModelConfiguration(schema));
            modelBuilder.Configurations.Add(new DealerGeoTownConfiguration(schema));
            modelBuilder.Configurations.Add(new DealerNameOverrideConfiguration(schema));
            modelBuilder.Configurations.Add(new ExceptionLogConfiguration(schema));
            modelBuilder.Configurations.Add(new MakeOverrideConfiguration(schema));
            modelBuilder.Configurations.Add(new ModelOverrideConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int GetAdCampaigns(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {
            var pageNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNo", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNo.HasValue)
                pageNoParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortOrderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortOrder", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortOrder, Size = 10 };
            if (sortOrderParam.Value == null)
                sortOrderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetAdCampaigns] @PageNo, @PerPage, @SortColumn, @SortOrder", pageNoParam, perPageParam, sortColumnParam, sortOrderParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int GetAdCampaignTemplates(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {
            var pageNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNo", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNo.HasValue)
                pageNoParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortOrderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortOrder", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortOrder, Size = 10 };
            if (sortOrderParam.Value == null)
                sortOrderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetAdCampaignTemplates] @PageNo, @PerPage, @SortColumn, @SortOrder", pageNoParam, perPageParam, sortColumnParam, sortOrderParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int GetAdCampiagnGroups(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {
            var pageNoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNo", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNo.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNo.HasValue)
                pageNoParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortOrderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortOrder", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortOrder, Size = 10 };
            if (sortOrderParam.Value == null)
                sortOrderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetAdCampiagnGroups] @PageNo, @PerPage, @SortColumn, @SortOrder", pageNoParam, perPageParam, sortColumnParam, sortOrderParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<GetAdTemplatesReturnModel> GetAdTemplates(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage)
        {
            int procResult;
            return GetAdTemplates(adCampaignId, dealerId, pageNumber, perPage, out procResult);
        }

        public System.Collections.Generic.List<GetAdTemplatesReturnModel> GetAdTemplates(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage, out int procResult)
        {
            var adCampaignIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AdCampaignId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = adCampaignId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!adCampaignId.HasValue)
                adCampaignIdParam.Value = System.DBNull.Value;

            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetAdTemplatesReturnModel>("EXEC @procResult = [dbo].[GetAdTemplates] @AdCampaignId, @DealerId, @PageNumber, @PerPage", adCampaignIdParam, dealerIdParam, pageNumberParam, perPageParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetAdTemplatesReturnModel>> GetAdTemplatesAsync(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage)
        {
            var adCampaignIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AdCampaignId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = adCampaignId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!adCampaignId.HasValue)
                adCampaignIdParam.Value = System.DBNull.Value;

            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetAdTemplatesReturnModel>("EXEC [dbo].[GetAdTemplates] @AdCampaignId, @DealerId, @PageNumber, @PerPage", adCampaignIdParam, dealerIdParam, pageNumberParam, perPageParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDealerMakeInformationReturnModel> GetDealerMakeInformation(int? dealerId)
        {
            int procResult;
            return GetDealerMakeInformation(dealerId, out procResult);
        }

        public System.Collections.Generic.List<GetDealerMakeInformationReturnModel> GetDealerMakeInformation(int? dealerId, out int procResult)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDealerMakeInformationReturnModel>("EXEC @procResult = [dbo].[GetDealerMakeInformation] @DealerId", dealerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDealerMakeInformationReturnModel>> GetDealerMakeInformationAsync(int? dealerId)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDealerMakeInformationReturnModel>("EXEC [dbo].[GetDealerMakeInformation] @DealerId", dealerIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<GetDealerMakeModelsReturnModel> GetDealerMakeModels(int? dealerId, string sortBy, string orderBy)
        {
            int procResult;
            return GetDealerMakeModels(dealerId, sortBy, orderBy, out procResult);
        }

        public System.Collections.Generic.List<GetDealerMakeModelsReturnModel> GetDealerMakeModels(int? dealerId, string sortBy, string orderBy, out int procResult)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var sortByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortBy, Size = 100 };
            if (sortByParam.Value == null)
                sortByParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 20 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<GetDealerMakeModelsReturnModel>("EXEC @procResult = [dbo].[GetDealerMakeModels] @DealerId, @SortBy, @OrderBy", dealerIdParam, sortByParam, orderByParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GetDealerMakeModelsReturnModel>> GetDealerMakeModelsAsync(int? dealerId, string sortBy, string orderBy)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var sortByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortBy, Size = 100 };
            if (sortByParam.Value == null)
                sortByParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 20 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<GetDealerMakeModelsReturnModel>("EXEC [dbo].[GetDealerMakeModels] @DealerId, @SortBy, @OrderBy", dealerIdParam, sortByParam, orderByParam).ToListAsync();

            return procResultData;
        }

        public GetExportLogsReturnModel GetExportLogs(string sortColumn, string sortBy, int? pageNumber, int? pageSize)
        {
            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortBy, Size = 10 };
            if (sortByParam.Value == null)
                sortByParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;


            var procResultData = new GetExportLogsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetExportLogs]";
            cmd.Parameters.Add(sortColumnParam);
            cmd.Parameters.Add(sortByParam);
            cmd.Parameters.Add(pageNumberParam);
            cmd.Parameters.Add(pageSizeParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetExportLogsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetExportLogsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetExportLogsReturnModel> GetExportLogsAsync(string sortColumn, string sortBy, int? pageNumber, int? pageSize)
        {
            var sortColumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortColumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortColumn, Size = 50 };
            if (sortColumnParam.Value == null)
                sortColumnParam.Value = System.DBNull.Value;

            var sortByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortBy, Size = 10 };
            if (sortByParam.Value == null)
                sortByParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;


            var procResultData = new GetExportLogsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetExportLogs]";
            cmd.Parameters.Add(sortColumnParam);
            cmd.Parameters.Add(sortByParam);
            cmd.Parameters.Add(pageNumberParam);
            cmd.Parameters.Add(pageSizeParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetExportLogsReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetExportLogsReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int GetMakeOverrides(int? pageNumber, int? perPage, string sortCoumn, string orderBy)
        {
            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var sortCoumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortCoumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortCoumn, Size = 1 };
            if (sortCoumnParam.Value == null)
                sortCoumnParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 1 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetMakeOverrides] @PageNumber, @PerPage, @SortCoumn, @OrderBy", pageNumberParam, perPageParam, sortCoumnParam, orderByParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int GetModelOverrides(int? pageNumber, int? perPage, string sortCoumn, string orderBy)
        {
            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var perPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PerPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = perPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!perPage.HasValue)
                perPageParam.Value = System.DBNull.Value;

            var sortCoumnParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortCoumn", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = sortCoumn, Size = 1 };
            if (sortCoumnParam.Value == null)
                sortCoumnParam.Value = System.DBNull.Value;

            var orderByParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderBy", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = orderBy, Size = 1 };
            if (orderByParam.Value == null)
                orderByParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetModelOverrides] @PageNumber, @PerPage, @SortCoumn, @OrderBy", pageNumberParam, perPageParam, sortCoumnParam, orderByParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public GetOffermanagerPaymentSettingsReturnModel GetOffermanagerPaymentSettings(int? accountId)
        {
            var accountIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccountId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = accountId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accountId.HasValue)
                accountIdParam.Value = System.DBNull.Value;


            var procResultData = new GetOffermanagerPaymentSettingsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetOffermanagerPaymentSettings]";
            cmd.Parameters.Add(accountIdParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetOffermanagerPaymentSettingsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetOffermanagerPaymentSettingsReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetOffermanagerPaymentSettingsReturnModel> GetOffermanagerPaymentSettingsAsync(int? accountId)
        {
            var accountIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccountId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = accountId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accountId.HasValue)
                accountIdParam.Value = System.DBNull.Value;


            var procResultData = new GetOffermanagerPaymentSettingsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetOffermanagerPaymentSettings]";
            cmd.Parameters.Add(accountIdParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetOffermanagerPaymentSettingsReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetOffermanagerPaymentSettingsReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public GetVehicleOptionsReturnModel GetVehicleOptions(int? dealerId, int? year, string make)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var makeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Make", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = make, Size = 50 };
            if (makeParam.Value == null)
                makeParam.Value = System.DBNull.Value;


            var procResultData = new GetVehicleOptionsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetVehicleOptions]";
            cmd.Parameters.Add(dealerIdParam);
            cmd.Parameters.Add(yearParam);
            cmd.Parameters.Add(makeParam);

            try
            {
                Database.Connection.Open();
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel5>(reader).ToList();
                reader.Close();

            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<GetVehicleOptionsReturnModel> GetVehicleOptionsAsync(int? dealerId, int? year, string make)
        {
            var dealerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DealerId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = dealerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!dealerId.HasValue)
                dealerIdParam.Value = System.DBNull.Value;

            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var makeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Make", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = make, Size = 50 };
            if (makeParam.Value == null)
                makeParam.Value = System.DBNull.Value;


            var procResultData = new GetVehicleOptionsReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[GetVehicleOptions]";
            cmd.Parameters.Add(dealerIdParam);
            cmd.Parameters.Add(yearParam);
            cmd.Parameters.Add(makeParam);

            try
            {
                await Database.Connection.OpenAsync().ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<GetVehicleOptionsReturnModel.ResultSetModel5>(reader).ToList();
            }
            finally
            {
                Database.Connection.Close();
            }
            return procResultData;
        }

        public int GetVehiclePaymentsForAquisio(int? year, string make, string model, int? pageSize, int? pageNumber)
        {
            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var makeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Make", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = make, Size = 100 };
            if (makeParam.Value == null)
                makeParam.Value = System.DBNull.Value;

            var modelParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Model", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = model, Size = 200 };
            if (modelParam.Value == null)
                modelParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var pageNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageNumber", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageNumber.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageNumber.HasValue)
                pageNumberParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[GetVehiclePaymentsForAquisio] @Year, @Make, @Model, @PageSize, @PageNumber", yearParam, makeParam, modelParam, pageSizeParam, pageNumberParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int VcmsGetHomeNetVehivlesAquisioNew()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[VCMS_GetHomeNetVehivles_Aquisio_NEW] ", procResultParam);

            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
