// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Pocogeneratortest
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<AdCampaign> AdCampaigns { get; set; }
        public System.Data.Entity.DbSet<AdCampaignSetting> AdCampaignSettings { get; set; }
        public System.Data.Entity.DbSet<AdTemplate> AdTemplates { get; set; }
        public System.Data.Entity.DbSet<AquisioFeedExportLog> AquisioFeedExportLogs { get; set; }
        public System.Data.Entity.DbSet<Auditing> Auditings { get; set; }
        public System.Data.Entity.DbSet<DealerExcludedModel> DealerExcludedModels { get; set; }
        public System.Data.Entity.DbSet<DealerGeoTown> DealerGeoTowns { get; set; }
        public System.Data.Entity.DbSet<DealerNameOverride> DealerNameOverrides { get; set; }
        public System.Data.Entity.DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public System.Data.Entity.DbSet<MakeOverride> MakeOverrides { get; set; }
        public System.Data.Entity.DbSet<ModelOverride> ModelOverrides { get; set; }

        public FakeMyDbContext()
        {
            AdCampaigns = new FakeDbSet<AdCampaign>("AdCampaignId");
            AdCampaignSettings = new FakeDbSet<AdCampaignSetting>("Id");
            AdTemplates = new FakeDbSet<AdTemplate>("Id");
            AquisioFeedExportLogs = new FakeDbSet<AquisioFeedExportLog>("Id");
            Auditings = new FakeDbSet<Auditing>("Id", "UserId", "TableName", "ColumnName", "OldValue", "NewValue", "Action", "IdentityValue", "Date");
            DealerExcludedModels = new FakeDbSet<DealerExcludedModel>("Id");
            DealerGeoTowns = new FakeDbSet<DealerGeoTown>("Id");
            DealerNameOverrides = new FakeDbSet<DealerNameOverride>("Id");
            ExceptionLogs = new FakeDbSet<ExceptionLog>("Id");
            MakeOverrides = new FakeDbSet<MakeOverride>("Id");
            ModelOverrides = new FakeDbSet<ModelOverride>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int GetAdCampaigns(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {

            return 0;
        }

        public int GetAdCampaignTemplates(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {

            return 0;
        }

        public int GetAdCampiagnGroups(int? pageNo, int? perPage, string sortColumn, string sortOrder)
        {

            return 0;
        }

        public System.Collections.Generic.List<GetAdTemplatesReturnModel> GetAdTemplates(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage)
        {
            int procResult;
            return GetAdTemplates(adCampaignId, dealerId, pageNumber, perPage, out procResult);
        }

        public System.Collections.Generic.List<GetAdTemplatesReturnModel> GetAdTemplates(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetAdTemplatesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetAdTemplatesReturnModel>> GetAdTemplatesAsync(int? adCampaignId, int? dealerId, int? pageNumber, int? perPage)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetAdTemplates(adCampaignId, dealerId, pageNumber, perPage, out procResult));
        }

        public System.Collections.Generic.List<GetDealerMakeInformationReturnModel> GetDealerMakeInformation(int? dealerId)
        {
            int procResult;
            return GetDealerMakeInformation(dealerId, out procResult);
        }

        public System.Collections.Generic.List<GetDealerMakeInformationReturnModel> GetDealerMakeInformation(int? dealerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDealerMakeInformationReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDealerMakeInformationReturnModel>> GetDealerMakeInformationAsync(int? dealerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDealerMakeInformation(dealerId, out procResult));
        }

        public System.Collections.Generic.List<GetDealerMakeModelsReturnModel> GetDealerMakeModels(int? dealerId, string sortBy, string orderBy)
        {
            int procResult;
            return GetDealerMakeModels(dealerId, sortBy, orderBy, out procResult);
        }

        public System.Collections.Generic.List<GetDealerMakeModelsReturnModel> GetDealerMakeModels(int? dealerId, string sortBy, string orderBy, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<GetDealerMakeModelsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<GetDealerMakeModelsReturnModel>> GetDealerMakeModelsAsync(int? dealerId, string sortBy, string orderBy)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetDealerMakeModels(dealerId, sortBy, orderBy, out procResult));
        }

        public GetExportLogsReturnModel GetExportLogs(string sortColumn, string sortBy, int? pageNumber, int? pageSize)
        {
            int procResult;
            return GetExportLogs(sortColumn, sortBy, pageNumber, pageSize, out procResult);
        }

        public GetExportLogsReturnModel GetExportLogs(string sortColumn, string sortBy, int? pageNumber, int? pageSize, out int procResult)
        {

            procResult = 0;
            return new GetExportLogsReturnModel();
        }

        public System.Threading.Tasks.Task<GetExportLogsReturnModel> GetExportLogsAsync(string sortColumn, string sortBy, int? pageNumber, int? pageSize)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetExportLogs(sortColumn, sortBy, pageNumber, pageSize, out procResult));
        }

        public int GetMakeOverrides(int? pageNumber, int? perPage, string sortCoumn, string orderBy)
        {

            return 0;
        }

        public int GetModelOverrides(int? pageNumber, int? perPage, string sortCoumn, string orderBy)
        {

            return 0;
        }

        public GetOffermanagerPaymentSettingsReturnModel GetOffermanagerPaymentSettings(int? accountId)
        {
            int procResult;
            return GetOffermanagerPaymentSettings(accountId, out procResult);
        }

        public GetOffermanagerPaymentSettingsReturnModel GetOffermanagerPaymentSettings(int? accountId, out int procResult)
        {

            procResult = 0;
            return new GetOffermanagerPaymentSettingsReturnModel();
        }

        public System.Threading.Tasks.Task<GetOffermanagerPaymentSettingsReturnModel> GetOffermanagerPaymentSettingsAsync(int? accountId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetOffermanagerPaymentSettings(accountId, out procResult));
        }

        public GetVehicleOptionsReturnModel GetVehicleOptions(int? dealerId, int? year, string make)
        {
            int procResult;
            return GetVehicleOptions(dealerId, year, make, out procResult);
        }

        public GetVehicleOptionsReturnModel GetVehicleOptions(int? dealerId, int? year, string make, out int procResult)
        {

            procResult = 0;
            return new GetVehicleOptionsReturnModel();
        }

        public System.Threading.Tasks.Task<GetVehicleOptionsReturnModel> GetVehicleOptionsAsync(int? dealerId, int? year, string make)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(GetVehicleOptions(dealerId, year, make, out procResult));
        }

        public int GetVehiclePaymentsForAquisio(int? year, string make, string model, int? pageSize, int? pageNumber)
        {

            return 0;
        }

        public int VcmsGetHomeNetVehivlesAquisioNew()
        {

            return 0;
        }

    }
}
// </auto-generated>
